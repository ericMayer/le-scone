// Variavéis esse tipo de comentário só aparece no scss no css irá sumir

$colunas: 12;
$gutter: 20px; /* margem da esquerda e direita */
$large-device: 1200px; // tamanho padrão que seria no computador
$medium-device: 760px; // tamanho medio que seria mais em tablets
$small-device: 480px; // tamanho pequeno que seria mais em celulares

/* Box Sizing */

*, *::before, *::after { /* será em todos os elementos do html, inclusive os before e after */
    /* não soma os valores por exemplo da borda, padding, margem ao tamanho do total width ou heigth, por exemplo, width: 200px padding:20 será 200px o width, sem o box-sizing: seria 240px; */
    box-sizing: border-box;
    -moz-box-sizing: border-box; /* firefox, versões mais antigas */
    -webkit-box-sizing: border-box; /* chrome e safari versões mais antigas */
}

// Mixin e media-queries

@mixin d($size) { // mixin dos media-queries
    // d = device
    // l = large
    // m = medium
    // s == small
   
    @if $size == l {
        // seria igual min-width: 1200px
        @media only screen and (min-width: #{$large-device}) { // necessário colocar a varíavel entre #{}, pois só assim irá pegar o valor correto que é os 1200px
            @content; // conteúdo será adiciondo quando for chamado o mixin e passado o parâmetro e cair nesse if
        }
    }

    @else if $size == m {
        // seria igual min-width: 760px and max-width: 1199
        @media only screen and (min-width: #{$medium-device}) and (max-width: 
        calc(#{$large-device} - 1px)) { 
            @content;
        }
    }
    
    @else if $size == s {
        // seria igual max-width: 759px
        @media only screen and (max-width: calc(#{$medium-device} - 1px)) { 
            @content;
        }
    }
}

// Função do Grid

@function flex-item($coluna, $offset: false) {
    
    // pega a coluna que foi passada, por exemplo, 5 e divide pelo total de colunas 12 e depois multiplica por 100% para dar a porcentagem que o grid deverá ocupar na tela
    $width: $coluna / $colunas * 100%; // +% não deixa por isso foi deixado 100%
    $resultado: calc(#{$width} - #{$gutter}); // tira o gutter que é margem de 20px do tamanho do grid

    @if $offset == offset {
        $gutter: $gutter / 2;
        $resultado: calc(#{$width} + #{$gutter}); // com offset será adicionado um espaço a mais na esquerda para criar uma folga entre os itens, por isso é somado com a metade do gutter
    }
    @return $resultado; // returnando o resultado calculado
}


// Classes do grid

@for $i from 1 through $colunas { // fazendo um for que irá começar de 1 e irá até 12
    .flex-item-#{$i} { // criando os grid-1, grid-2, grid-3
        //width: grid($i); // o tamanho dele será gerado automática pela função acima
        flex: 0 0 flex-item($i); // aqui irá criar o flex: grow 0 shrink 0 e o basis será o cálculo feito pela função flex-item que irá definir o tamanho que irá ocupar na tela, nesse caso sempre o flex-item irá estar dentro do flex-container que é dislay flex, por isso o flex-item será literalmente um flex-item
    }
}

// Mixin do gutter do grid 

@mixin estrutura-flex { // aqui será definido as margens que serão utilizadas nos elementos
   
    //float: left;
    min-height: 1px; /* colocando min-heigth, pois algumas propriedades precisam ter um mínimo de altura para funcionarem corretamente não quebrarem o layout */
    margin-left: $gutter / 2;
    margin-right: $gutter / 2;

    @include d(s) { // para celular
        //max-width: 100%;
        //float: none;
        //flex-direction: column; /* no mobile só será usado uma única coluna */
        margin-right: 0;
        margin-left: 0;
    }
}

[class^="flex-item-"] { /* seletor que seleciona todas as classes do css que começam com flex-item-, caso colocasse alt selecionaria todas imagens que têm alt */
    @include estrutura-flex; // chamado o mixin da estrutura do grid
}

// Classes do offset
/* O Offset irá pegar certinho o espaço entre os elementos que ficar desajustado e irá adicionar mais o gutter para ficar alinhado o conteúdo corretamente */
@for $i from 1 through $colunas { // fazendo um for que irá começar de 1 e irá até 12
    .offset-#{$i} { // criando os offset-1, offset-2, offset-3
        margin-left: flex-item($i, offset); // o tamanho dele será gerado automática pela função acima
        @extend %offset; // será gerado com offset-1, offset-2, pois sempre que usa o extend ele vai adicionando uma virgula quando usado várias vezes, por exemplo no laço de repetição
    }
}

@include d(s) { // para celular
    %offset { // criada, porém só irá existir quando usar o @extend
        margin-left: 0px;
    }

}

// Mixin de clearfix - não será usado

/*@mixin clearfix {
    &::after, &::before {
        content: '';
        display: table;
        clear: both;
    }
}*/

// Mixin do container 

@mixin flex-container {
    display: flex; /* será usado o flexbox ao invés de float */
    flex-wrap: wrap; /* quando não couber irá quebrar linha */
    
    max-width: $large-device; // 1200px
    margin: 0 auto; // sempre estará alinhado ao centro do container
    //position: relative;

    @include d(m) {
        max-width: $medium-device; // 760px
    }

    @include d(s) {
        flex-direction: column; // visual será em colunas, diferente do padrão que é linha do flexbox
        max-width: $small-device; // 480px
        padding-left: 10px;
        padding-right: 10px;
    }
    //@include clearfix;
}

// Classe container

.flex-container {
    @include flex-container;
}

// Mixin de linha
/* quando eu tiver flex-item dentro de flex-item será adicionado as margens automaticamente, porém eu não irei querer isso, pois irá desalinhar todo o conteúdo, por isso será subtraído a margem que já foi adicionada */
@mixin flex-row {
    //position: relative;
    display: flex; // conforme for fazendo o desenvolvimento irei verificar a necessidade
    /* é necessário o display flex, pois quando estiver dentro de um flex-item e for adicionar mais flex-items será necessário tirar a margem adicional que será colocada e também ele precisa pegar o tamanho do pai como padrão é não o do flex-item padrão, por isso é necessário que tenha um display flex, como não é possível adicionar o flex-container, pois quebraria o layout todo, por isso é adcionado o row como display flex */
    flex-wrap: wrap;
    margin-right: -$gutter / 2;
    margin-left: -$gutter / 2;
    @include d(s) {
        margin-right: 0;
        margin-left: 0;
    }
    //@include clearfix;
}

.flex-row {
    @include flex-row;
}

